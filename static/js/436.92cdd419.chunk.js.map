{"version":3,"file":"static/js/436.92cdd419.chunk.js","mappings":"mLAAaA,EAAS,kBAAM,sCAAN,C,qECETC,E,OAAeC,GAAAA,IAAH,yE,8JCAZC,EAAOD,EAAAA,GAAAA,GAAH,4EAKJE,EAAWF,EAAAA,GAAAA,GAAH,0JAKL,SAAAG,GAAC,OAAIA,EAAEC,MAAMC,MAAZ,IAGJC,EAASN,EAAAA,GAAAA,IAAH,+E,SCZNO,EAAW,SAAC,GAA6B,IAAdC,EAAa,EAA1BC,UAAaD,KACtC,OACE,yBACGA,EAAKE,OAAS,GACb,SAACT,EAAD,UACGO,EAAKG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACR,UAACb,EAAD,YACE,SAACI,EAAD,CACEU,IACEF,EAAY,0CAC2BA,GACnC,iGAENG,IAAKJ,EACLK,MAAM,KACNC,OAAO,QAET,4BACE,uBAAIN,KACJ,uCAAeE,UAbJH,EADP,OAoBZ,oDAIP,E,iBCaD,EAnCiB,WAEf,OAAkCQ,EAAAA,EAAAA,UAAS,MAA3C,eAAOX,EAAP,KAAkBY,EAAlB,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,mCAAG,WAAMH,GAAN,8EACfH,GAAa,GADE,kBAGcO,EAAAA,EAAAA,eAAyBJ,GAHvC,OAGPK,EAHO,OAIbV,EAAaU,GAJA,gDAMbN,EAAS,KAAMO,SANF,yBAQbT,GAAa,GARA,4EAAH,sDAYdM,EAASH,EACV,GAAE,CAACA,KAEF,gCACGJ,IACC,SAAC,IAAD,WACE,SAACxB,EAAA,EAAD,MAGH0B,IAAS,mDACTf,IAAa,SAACF,EAAD,CAAUE,UAAWA,MAGxC,C,4FC1CKwB,EAAM,mCAECH,EAAY,CACjBI,YADiB,WACF,OAAD,qHACKC,EAAAA,GAAAA,IAAA,gEACoCF,IAFzC,cACZG,EADY,gBAILA,EAASC,KAAKC,QAJT,oFAKnB,EACKC,eAPiB,SAOFb,GAAU,OAAD,qHACLS,EAAAA,GAAAA,IAAA,6CACiBT,EADjB,oBACoCO,EADpC,oBADK,cACtBG,EADsB,gBAIfA,EAASC,KAJM,oFAK7B,EACKG,mBAbiB,SAaEC,GAAc,OAAD,qHACbN,EAAAA,GAAAA,IAAA,4DACgCF,EADhC,iCAC4DQ,EAD5D,gCADa,cAC9BL,EAD8B,gBAIvBA,EAASC,KAAKC,QAJS,oFAKrC,EACKI,eAnBiB,SAmBFhB,GAAU,OAAD,qHACLS,EAAAA,GAAAA,IAAA,6CACiBT,EADjB,4BAC4CO,EAD5C,oBADK,cACtBG,EADsB,gBAIfA,EAASC,KAJM,oFAK7B,EACKM,kBAzBiB,SAyBCjB,GAAU,OAAD,qHACRS,EAAAA,GAAAA,IAAA,6CACiBT,EADjB,4BAC4CO,EAD5C,2BADQ,cACzBG,EADyB,gBAIlBA,EAASC,KAJS,oFAKhC,E","sources":["components/Loader/Loader.jsx","components/Loader/loader.styled.js","components/Cast/CastStyle.styled.js","components/Cast/Cast.jsx","pages/CastPage/CastPage.jsx","servies/MoviesApi.js"],"sourcesContent":["export const Loader = () => <p>Loading ...</p>;\n","import styled from 'styled-components';\n\nexport const UpdateLoader = styled.div`\n  position: absolute;\n  left: 50%;\n  top: 50%;\n`;\n","import styled from 'styled-components';\n\nexport const Cast = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\nexport const CastItem = styled.li`\n  width: calc((100% - 40px) / 5);\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  box-shadow: ${p => p.theme.shadow};\n  font-size: 12px;\n`;\nexport const Avatar = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n`;\n","import PropTypes from 'prop-types';\nimport { Cast, CastItem, Avatar } from './CastStyle.styled';\n\nexport const CastList = ({ movieInfo: { cast } }) => {\n  return (\n    <div>\n      {cast.length > 0 ? (\n        <Cast>\n          {cast.map(({ id, name, profile_path, character }) => (\n            <CastItem key={id}>\n              <Avatar\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                    : 'https://st2.depositphotos.com/1898481/6448/i/600/depositphotos_64486573-stock-photo-people.jpg'\n                }\n                alt={name}\n                width=\"50\"\n                height=\"75\"\n              />\n              <div>\n                <p>{name}</p>\n                <p>Character: {character}</p>\n              </div>\n            </CastItem>\n          ))}\n        </Cast>\n      ) : (\n        <p>We have no more details</p>\n      )}\n    </div>\n  );\n};\n\nCastList.propTypes = {\n  info: PropTypes.shape({\n    cast: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        profile_path: PropTypes.string,\n        character: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n  }).isRequired,\n};\n","import { Loader } from '../../components/Loader/Loader';\n\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n// import { Loader } from '../components/Loader/Loader';\n// import { useFetchMovieInfo } from 'hooks/useFetchMovieInfo';\nimport { CastList } from '../../components/Cast/Cast';\nimport { MoviesAPI } from '../../servies/MoviesApi';\nimport { UpdateLoader } from '../../components/Loader/loader.styled';\n\nconst CastPage = () => {\n  //   const { movieInfo, isLoading, error } = FetchMovieCast('movieId');\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getMovie = async movieId => {\n      setIsLoading(true);\n      try {\n        const movieDetails = await MoviesAPI.fetchMovieCast(movieId);\n        setMovieInfo(movieDetails);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getMovie(movieId);\n  }, [movieId]);\n  return (\n    <>\n      {isLoading && (\n        <UpdateLoader>\n          <Loader />\n        </UpdateLoader>\n      )}\n      {error && <p>We have no more details</p>}\n      {movieInfo && <CastList movieInfo={movieInfo} />}\n    </>\n  );\n};\n\nexport default CastPage;\n","import axios from 'axios';\nconst KEY = 'aaa1d6367cdda8ac8cbbbe618a1aa87a';\n\nexport const MoviesAPI = {\n  async fetchMovies() {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/trending/all/day?api_key=${KEY}`\n    );\n    return await response.data.results;\n  },\n  async fetchMovieById(movieId) {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=${KEY}&language=en-US`\n    );\n    return await response.data;\n  },\n  async fetchMovieBySearch(searchTitle) {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${KEY}&language=en-US&query=${searchTitle}&page=1&include_adult=false`\n    );\n    return await response.data.results;\n  },\n  async fetchMovieCast(movieId) {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n    );\n    return await response.data;\n  },\n  async fetchMovieReviews(movieId) {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n    );\n    return await response.data;\n  },\n};\n"],"names":["Loader","UpdateLoader","styled","Cast","CastItem","p","theme","shadow","Avatar","CastList","cast","movieInfo","length","map","id","name","profile_path","character","src","alt","width","height","useState","setMovieInfo","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","getMovie","MoviesAPI","movieDetails","message","KEY","fetchMovies","axios","response","data","results","fetchMovieById","fetchMovieBySearch","searchTitle","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}